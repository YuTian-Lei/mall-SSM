<?xml version="1.0" encoding="UTF-8" ?>
<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

  <!-- 定义日志文件 输出位置 -->
  <property name="log.home_dir" value="D:/usr/local/logs/mmall"/>
  <property name="log.app_name" value="mmall"/>
  <!-- 日志最大的历史 30天 -->
  <property name="log.maxHistory" value="10"/>
  <property name="log.level" value="debug"/>
  <property name="log.maxSize" value="5MB"/>

  <!-- ConsoleAppender 控制台输出日志 -->
  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoding>UTF-8</encoding>
    <encoder>
      <pattern>
        <!-- 设置日志输出格式 -->
        %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] %logger - %msg%n
      </pattern>
    </encoder>
    <!-- 过滤掉 TRACE 级别的日志-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>TRACE</level>
    </filter>
  </appender>

  <!--设置一个向上传递的appender,所有级别的日志都会输出-->
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 过滤掉 TRACE 级别的日志-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>TRACE</level>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>
        ${log.home_dir}/logs/%d{yyyy-MM-dd}/${log.app_name}-%i.log
      </fileNamePattern>
      <append>true</append>
      <maxHistory>${log.maxHistory}</maxHistory>
      <MaxFileSize>${log.maxSize}</MaxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>
    </encoder>
  </appender>

  <!--分隔线,以上为具体使用Appender,下面为展示示例,不同级别的日志保存文件-->

  <!-- ERROR级别日志 -->
  <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
  <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 过滤器，只记录WARN级别的日志 -->
    <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>ERROR</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
    <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--日志输出位置 可相对、和绝对路径 -->
      <fileNamePattern>
        ${log.home_dir}/error/%d{yyyy-MM-dd}/${log.app_name}-%i.log
      </fileNamePattern>
      <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,假设设置每个月滚动，且<maxHistory>是6，
      则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
      <maxHistory>${log.maxHistory}</maxHistory>
      <!--日志文件最大的大小-->
      <MaxFileSize>${log.maxSize}</MaxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>
        <!-- 设置日志输出格式 -->
        %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
      </pattern>
    </encoder>
  </appender>


  <!-- WARN级别日志 appender -->
  <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 过滤器，只记录WARN级别的日志 -->
    <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>WARN</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--日志输出位置 可相对、和绝对路径 -->
      <fileNamePattern>${log.home_dir}/warn/%d{yyyy-MM-dd}/${log.app_name}-%i.log</fileNamePattern>
      <maxHistory>${log.maxHistory}</maxHistory>
      <!--当天的日志大小 超过MaxFileSize时,压缩日志并保存-->
      <MaxFileSize>${log.maxSize}</MaxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
    </encoder>
  </appender>


  <!-- INFO级别日志 appender -->
  <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${log.home_dir}/info/%d{yyyy-MM-dd}/${log.app_name}-%i.log</fileNamePattern>
      <maxHistory>${log.maxHistory}</maxHistory>
      <MaxFileSize>${log.maxSize}</MaxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>
    </encoder>
  </appender>


  <!-- DEBUG级别日志 appender -->
  <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${log.home_dir}/debug/%d{yyyy-MM-dd}/${log.app_name}-%i.log</fileNamePattern>
      <maxHistory>${log.maxHistory}</maxHistory>
      <MaxFileSize>${log.maxSize}</MaxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>
    </encoder>
  </appender>


  <!-- TRACE级别日志 appender -->
  <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>TRACE</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${log.home_dir}/trace/%d{yyyy-MM-dd}/${log.app_name}-%i.log</fileNamePattern>
      <maxHistory>${log.maxHistory}</maxHistory>
      <MaxFileSize>${log.maxSize}</MaxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>
    </encoder>
  </appender>

  <!--logger,不指定appender时会继承root节点中定义的appender,相关日志会输出到root节点的appender-->

  <!--org.springframework.web包下的类的日志输出-->
  <!--如果没有设置 additivity="false" ,就会导致一条日志在控制台输出两次的情况-->
  <!--additivity表示要不要使用rootLogger配置的appender进行输出-->
  <logger name="org.springframework.web" additivity="false" level="ERROR">
    <appender-ref ref="FILE"/>
  </logger>

  <!--com.zgd包下的类的日志输出-->
  <logger name="com.zgd" additivity="false" level="ERROR">
    <appender-ref ref="FILE"/>
    <!--打印控制台-->
    <appender-ref ref="CONSOLE"/>
  </logger>


  <!--mybatis log日志,查看mybatis sql执行语句-->
  <logger name="com.easycode.mmall.dao" additivity="false" level="ERROR">
    <appender-ref ref="FILE"/>
    <appender-ref ref="CONSOLE"/>
  </logger>

  <!-- root级别   DEBUG -->
  <root level="INFO">
    <!-- 控制台输出 -->
    <appender-ref ref="CONSOLE"/>
    <appender-ref ref="FILE"/>
    <!-- 不管什么包下的日志都输出文件 -->
    <!--<appender-ref ref="INFO"/>-->
    <!--<appender-ref ref="WARN"/>-->
    <!--<appender-ref ref="DEBUG"/>-->
    <!--<appender-ref ref="TRACE"/>-->
  </root>
</configuration>
